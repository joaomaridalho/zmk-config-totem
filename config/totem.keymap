#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "keys_pt.h"
#include "zmk-helpers/key-labels/totem.h"       
#include "zmk-helpers/helper.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.


#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50


#define BASE 0
#define COLEMAK 1
#define NUM 2
#define SYM 3

#define QUICK_TAP_MS 175

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

ZMK_HOLD_TAP(grave_hold,
    bindings = <&kp>, <&grave_spc>; 
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
)

// #define SMART_NUM &smart_num NUM 0
// ZMK_HOLD_TAP(smart_num, 
//     bindings = <&mo>, <&num_dance>;
//     flavor = "balanced";
//     tapping-term-ms = <200>;
//     quick-tap-ms = <QUICK_TAP_MS>;
// )
// ZMK_TAP_DANCE(num_dance,
//     bindings = <&num_word NUM>, <&sl NUM>;
//     tapping-term-ms = <200>;
// )

// Macros
ZMK_MACRO(grave_spc,
    bindings = <&kp PT_GRAVE &kp PT_SPACE>;
    wait-ms = <0>;
    tap-ms = <5>;)
// MOD MORPHS
ZMK_MOD_MORPH(bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
// ZMK_MOD_MORPH(slsh_blslsh,
//     bindings = <&kp PT_FSLH>, <&kp PT_BSLH>;
//     mods = <(MOD_LSFT|MOD_RSFT)>;
// )
ZMK_MOD_MORPH(lpar_lt, 
    bindings = <&kp PT_LPAR>, <&kp PT_LT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_MOD_MORPH(rpar_gt, 
    bindings = <&kp PT_RPAR>, <&kp PT_GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_MOD_MORPH(lbkt_lbrc,
    bindings = <&kp PT_LBKT>, <&kp PT_LBRC>;
    mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(rbkt_rbrc,
    bindings = <&kp PT_RBKT>, <&kp PT_RBRC>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


// Combos
ZMK_COMBO(del, &bs_del, LT1 LT2)
ZMK_COMBO(tab, &kp TAB, LM2 LM3)
ZMK_COMBO(copy, &kp LC(PT_C), LB2 LB3)
ZMK_COMBO(paste, &kp LC(PT_P), LB1 LB2)
ZMK_COMBO(lpar_lt, &lpar_lt, RM1 RM2,ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST, RS(LCTRL), KEYS_L)
ZMK_COMBO(rpar_gt, &rpar_gt, RM2 RM3,ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST, RS(LALT), KEYS_L)
ZMK_COMBO(lbkt_lbrc, &lbkt_lbrc, RB1 RB2,ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST) 
ZMK_COMBO(rbkt_rbrc, &rbkt_rbrc, RB2 RB3,ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST) 
ZMK_COMBO(dqt,&kp PT_DQT, LT1 LM1)
ZMK_COMBO(sqt,&kp PT_SQT, LM1 LB1)
ZMK_COMBO(tilde,&kp PT_TILDE, RT1 RT2)
ZMK_COMBO(acute_grave,&grave_hold PT_ACUTE 0, RT2 RT3)

#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)                 \/
      ZMK_LAYER(name, LT RT LM RM LB RB LH RH)
#endif

ZMK_BASE_LAYER(Base,
                     &kp PT_Q         &kp PT_W         &kp PT_E         &kp PT_R         &kp PT_T         , &kp PT_Y         &kp PT_U         &kp PT_I         &kp PT_O        &kp PT_P ,
                     &hml LGUI PT_A   &hml LALT PT_S   &hml LCTRL PT_D  &hml LSHIFT PT_F &kp PT_G         , &kp PT_H         &hmr RSHFT PT_J  &hmr RCTRL PT_K  &hmr LALT PT_L  &hmr RGUI PT_C_CEDILLA ,
    &kp ESCAPE       &kp PT_Z         &kp PT_X         &kp PT_C         &kp PT_V         &kp PT_B         , &kp PT_N         &kp PT_M         &kp PT_COMMA     &kp PT_DOT      &kp PT_MINUS    &kp PT_DOT ,
                                                       &kp TAB          &kp RET          &kp SPACE        , &kp SPACE        &kp SPACE        &kp BSPC  
)
ZMK_BASE_LAYER(Colemak,
                     &kp PT_Q         &kp PT_W         &kp PT_F         &kp PT_P         &kp PT_B         , &kp PT_J         &kp PT_L         &kp PT_U         &kp PT_Y        &kp PT_C_CEDILLA,
                     &hml LGUI PT_A   &hml LALT PT_R   &hml LCTRL PT_S  &hml LSHIFT PT_T &kp PT_G         , &kp PT_M         &hmr RSHFT PT_N  &hmr RCTRL PT_E  &hmr LALT PT_I  &hmr RGUI PT_O,
    &kp ESCAPE       &kp PT_Z         &kp PT_X         &kp PT_C         &kp PT_D         &kp PT_V         , &kp PT_K         &kp PT_H         &kp PT_COMMA     &kp PT_DOT      &kp PT_MINUS    &kp APOSTROPHE ,
                                                       &mt LCTRL DEL    &lt SYM RET      &kp RET          , &kp SPACE        &lt 2 SPACE      &kp MINUS
)
ZMK_BASE_LAYER(Num,
                     &kp PT_SLASH     &kp PT_N1        &kp PT_N2        &kp PT_N3        &kp PT_MINUS     , &none            &kp RC(PT_D)     &kp RC(PT_U)     &none           &to COLEMAK,
                     &kp PT_ASTERISK  &kp PT_N4        &kp PT_N5        &kp PT_N6        &kp PT_PLUS      , &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT       &none ,
    &kp ESCAPE       &kp PT_COMMA     &kp PT_N7        &kp PT_N8        &kp PT_N9        &kp PT_EQUAL     , &kp PT_N         &sk LSHIFT       &sk RCTRL        &sk RALT        &sk RGUI    &none ,
                                                       &kp PT_DOT       &kp PT_N0        &kp RET          , &kp SPACE        &lt 2 SPACE      &kp MINUS
)