#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "keys_pt.h"
#include "zmk-helpers/key-labels/totem.h"       
#include "zmk-helpers/helper.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.


#define BASE 0
#define NAV 1
#define SYM 2
#define FN 3
#define GAME 4
#define GPLUS 5
#define QUICK_TAP_MS 175
&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/* Left-hand HRMs. */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
)

/* Right-hand HRMs. */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
)

ZMK_HOLD_TAP(grave_hold,
    bindings = <&kp>, <&grave_spc>; 
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
)

// Macros
ZMK_MACRO(grave_spc,
    bindings = <&kp PT_GRAVE &kp PT_SPACE>;
    wait-ms = <0>;
    tap-ms = <5>;)
// MOD MORPHS
ZMK_MOD_MORPH(bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_MOD_MORPH(lpar_lt, 
    bindings = <&kp PT_LPAR>, <&kp PT_LT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_MOD_MORPH(rpar_gt, 
    bindings = <&kp PT_RPAR>, <&kp PT_GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_MOD_MORPH(lbkt_lbrc,
    bindings = <&kp PT_LBKT>, <&kp PT_LBRC>;
    mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(rbkt_rbrc,
    bindings = <&kp PT_RBKT>, <&kp PT_RBRC>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


// Combos
ZMK_COMBO(del, &bs_del, LT1 LT2)
ZMK_COMBO(tab, &kp TAB, LM2 LM3)
ZMK_COMBO(copy, &kp LC(PT_C), LB2 LB3)
ZMK_COMBO(paste, &kp LC(PT_P), LB1 LB2)
ZMK_COMBO(lpar_lt, &lpar_lt, RM1 RM2)
ZMK_COMBO(rpar_gt, &rpar_gt, RM2 RM3)
ZMK_COMBO(lbkt_lbrc, &lbkt_lbrc, RB1 RB2)
ZMK_COMBO(rbkt_rbrc, &rbkt_rbrc, RB2 RB3)
ZMK_COMBO(dqt,&kp PT_DQT, LT1 LM1)
ZMK_COMBO(sqt,&kp PT_SQT, LM1 LB1)
ZMK_COMBO(tilde,&kp PT_TILDE, RT1 RT2)
ZMK_COMBO(acute_grave,&grave_hold PT_ACUTE 0, RT2 RT3)

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";
        Base {
            display-name = "Base";
            bindings = <
              &kp PT_Q       &kp PT_W       &kp PT_E          &kp PT_R         &kp PT_T        &kp PT_Y    &kp PT_U        &kp PT_I        &kp PT_O       &kp PT_P
              &hml LGUI PT_A  &hml LALT PT_S  &hml LCTRL PT_D    &hml LSHIFT PT_F  &kp PT_G        &kp PT_H    &hmr RSHFT PT_J  &hmr RCTRL PT_K  &hmr LALT PT_L  &hmr RGUI PT_C_CEDILLA
&lt 3 ESCAPE  &kp Z       &kp X       &kp PT_C          &kp PT_V         &kp PT_B        &kp PT_N    &kp PT_M        &kp PT_COMMA    &kp PT_DOT     &kp PT_MINUS    &kp APOSTROPHE
                                      &mt LCTRL DEL  &lt NAV RET   &kp TAB    &kp RET  &lt 2 SPACE   &kp MINUS
            >;
        };

        Nav {
            display-name = "Nav";
            bindings = <
              &kp TILDE       &trans     &kp UP_ARROW  &trans     &kp LBRC    &kp RBRC  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
              &kp LEFT_SHIFT  &kp LEFT   &kp DOWN      &kp RIGHT  &kp LBKT    &kp RBKT  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&kp LEFT_ALT  &kp LEFT_WIN    &kp MINUS  &trans        &kp PLUS   &kp LPAR    &kp RPAR  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_MULTIPLY  &kp PLUS
                                         &trans        &trans     &trans      &trans    &trans        &kp DOT
            >;
        };

        Symbols {
            display-name = "Sym";
            bindings = <
                &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp KP_ASTERISK  &kp SQT  &kp DQT
                &trans    &trans  &trans    &trans      &trans         &trans     &trans         &trans           &trans   &trans
&studio_unlock  &trans    &trans  &trans    &trans      &trans         &kp UNDER  &kp EQUAL      &trans           &trans   &kp SLASH  &kp HOME
                                  &trans    &trans      &trans         &trans     &trans         &trans
            >;
        };

        Function {
            display-name = "Fn";
            bindings = <
        &bootloader  &trans  &trans  &trans  &to 4     &kp F1  &kp F2  &kp F3  &kp F4   &kp F5
        &trans       &trans  &trans  &trans  &trans    &kp F6  &kp F2  &kp F3  &kp F4   &kp F5
&trans  &trans       &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans   &kp F20  &kp F7
                             &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        GAME {
            display-name = "Game";
            bindings = <
            &kp Z           &kp X  &kp C      &kp V         &sl 5     &trans  &trans  &trans  &trans  &trans
            &kp TAB         &kp Q  &kp W      &kp E         &kp R     &trans  &trans  &trans  &trans  &trans
&kp ESCAPE  &kp LEFT_SHIFT  &kp A  &kp S      &kp D         &kp F     &trans  &trans  &trans  &trans  &trans  &trans
                                   &kp LCTRL  &kp LEFT_ALT  &trans    &trans  &trans  &trans
            >;
        };

        GPLUS {
            display-name = "Game+";
            bindings = <
        &kp F10  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp T     &kp RA(RC(Y))  &kp RA(RC(U))  &trans  &trans  &kp LC(RA(DEL))
        &kp L    &kp O         &kp Y         &kp K         &kp G     &kp F5         &trans         &trans  &trans  &trans
&trans  &to 0    &trans        &trans        &trans        &trans    &trans         &trans         &trans  &trans  &trans           &kp LA(F4)
                               &kp J         &kp I         &kp M     &trans         &trans         &trans
            >;
        };
    };
};
